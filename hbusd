#!/usr/bin/env python3

##@package hbus
#hbussd main module
#@author Bruno Morais <brunosmmm@gmail.com>
#@date 2012-2014

import logging
from hbussd.master.master import HbusMaster
from hbussd.master.web import HBUSWEB
import argparse

from twisted.internet import reactor
from twisted.internet.serialport import SerialPort
from twisted.internet.protocol import Protocol, ClientFactory
from twisted.internet.task import LoopingCall
from twisted.web import server
from hbussd.master.jsonserver import HBUSJSONServer
import json

import signal

# Main bus where master is located
BUSID = 0


class TwistedSerialPort(Protocol):
    """Twisted protocol subclass for serial port access."""

    def __init__(self, master):
        self.master = master

    def connectionMade(self):
        """Prototype for connection made event."""
        self.master.serialConnected()

    # @param data received data
    def dataReceived(self, data):
        """Prototype for data received event."""
        self.master.serialNewData(data)


class HBUSFakeBus(ClientFactory):
    """Fakebus client interface."""

    def __init__(self, master):
        self.master = master
        self.serial = TwistedSerialPort(self.master)

    def startedConnecting(self, connector):
        pass

    def buildProtocol(self, addr):
        return self.serial

    def clientConnectionLost(self, connector, reason):
        pass

    def clientConnectionFailed(self, connector, reason):
        pass


##Main HBUS server object class
#
#Cpntains control elements for external connections
#
#@todo stable: Verify behavior in case addressing timeouts occur
#@todo stable: Finishing up test version, include byte type value modifier for web page
#@todo stable: incluir código para permitir edição de objetos tipo Byte, Int e Unsigned Int
#@todo default: Implement integrated twisted http server for JSON data exchange
#@todo default: Explore feasibility of doing an automatic data dump of all system objects when enumeration is done
class TwistedhbusMaster(HbusMaster):

    hbusSerial = None

    ##Serial port system initialization
    def serialCreate(self, fake=False):

        if fake is False:
            self.hbusSerial = TwistedSerialPort(self)
            try:
                SerialPort(self.hbusSerial,
                           self.serialPort,
                           reactor,
                           baudrate=self.serialBaud,
                           timeout=0)
            except Exception as ex:
                self.logger.error('fatal error opening serial port: {}'
                                  .format(ex))
                exit(1)

        else:
            # fake bus
            f = HBUSFakeBus(self)
            self.hbusSerial = f.serial
            reactor.connectTCP('localhost',
                               9090,
                               f)
            # connect to ourselves!

    ##Writes data to serial port
    #@param string data string to be written
    def serialWrite(self, string):

        self.hbusSerial.transport.write(string)

        pass

    def initWebServer(self):

        pass

##Signal handler
#@param signum signal number
#@param frame signal frame
def SignalHandler(signum, frame):

    reactor.stop()
    # exit(0)


def main():
    """Execute main Loop."""
    logging.basicConfig(level=logging.DEBUG,
                        filename='hbussd.log',
                        filemode='w',
                        format='%(asctime)s - %(name)s - '
                               '%(levelname)s - %(message)s')
    console = logging.StreamHandler()
    console.setLevel(logging.INFO)
    logging.getLogger('').addHandler(console)

    logger = logging.getLogger('hbussd')

    # argparse
    parser = argparse.ArgumentParser(description='HBUS Services Daemon')
    mutexArgs = parser.add_mutually_exclusive_group()
    mutexArgs.add_argument('-s', help='Serial port path')
    mutexArgs.add_argument('-f',
                           help='Enable fake bus for debugging without'
                           ' actual hardware',
                           action='store_true')
    parser.add_argument('-b', help='Bus baud rate', default=100000, type=int)
    parser.add_argument('-w', help='Enables integrated web server',
                        action='store_true')
    parser.add_argument('-wp', help='Integrated web server port',
                        default=8000, type=int)
    parser.add_argument('-c', help='Slave polling interval in seconds',
                        default=300, type=int)
    parser.add_argument('--no-announce', help='Do not announce service',
                        action='store_true')
    parser.add_argument('--conf', help='Load configuration file',
                        default=None, type=str)

    args = vars(parser.parse_args())

    conf = {}
    if args['conf'] is not None:
        try:
            conf = json.load(open(args['conf']))
        except:
            logger.error('specified configuration file not found')
            exit(1)

    if args['s'] is None and args['f'] is False:
        # check configuration file
        if 'fakebus' not in conf and 'serial_port' not in conf:
            print("error: bus connection not setup! use -f or -s or"
                  " proper configuration file")
            exit(1)

    logger.info("hbussd start")

    signal.signal(signal.SIGTERM, SignalHandler)
    signal.signal(signal.SIGINT, SignalHandler)

    hbusMaster = TwistedhbusMaster(args['s'],
                                   baudrate=args['b'],
                                   conf_file=conf)

    hbusMasterPeriodicTask = LoopingCall(hbusMaster.periodicCall)
    hbusMasterPeriodicTask.start(1)

    hbusSlaveChecker = LoopingCall(hbusMaster.checkSlaves)
    hbusSlaveChecker.start(args['c'], False)

    # web server start
    # #@todo start server only after enumeration

    webif_announcer = None
    rpc_announcer = None
    if args['w'] is True or ('web_if' in conf and conf['web_if'] is True):
        # integrated web server
        logger.info('Integrated web server enabled')
        hbusWeb = HBUSWEB(args['wp'], hbusMaster)
        hbusWeb.run()
        if args['no_announce'] is False and (('announce' in conf and
                                              conf['announce'] is True) or
                                             'announce' not in conf):
            webif_announcer = ZeroconfService(name='HBUS Server',
                                              port=args['wp'])
            webif_announcer.publish()

    # JSON SERVER
    if args['no_announce'] is False and (('announce' in conf and
                                          conf['announce'] is True) or
                                         'announce' not in conf):
        from announce.zeroconf import ZeroconfService
        rpc_announcer = ZeroconfService(name='HBUS Server RPC',
                                        port=7080, stype='_hbusrpc._tcp')
        rpc_announcer.publish()

    reactor.listenTCP(7080, server.Site(HBUSJSONServer(hbusMaster)))

    reactor.run()

    # cleanup
    if rpc_announcer is not None:
        rpc_announcer.unpublish()
    if webif_announcer is not None:
        webif_announcer.unpublish()


if __name__ == '__main__':
    main()
